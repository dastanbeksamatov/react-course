{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","axios","get","then","response","data","newObject","post","id","put","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4LAaeA,EAXF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACbC,EAAQF,EAAKG,UACf,mBAAqB,iBACzB,OACE,4BACGH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,K,gBCU3B,EAfA,WAEb,OADgBI,IAAMC,IAHR,cAICC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KARR,aAQsBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAbF,aAaE,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCoE5BK,EA/EH,SAACC,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAESF,mBAAS,IAFlB,mBAEdG,EAFc,KAELC,EAFK,OAGSJ,oBAAS,GAHlB,mBAGdK,EAHc,KAGLC,EAHK,KAKrBC,qBAAU,WACRC,IAEGjB,MAAK,SAAAkB,GACJP,EAASO,QAEZ,IAmBHC,QAAQC,IAAI,SAAUV,EAAMW,OAAQ,SAEpC,IAkBMC,EAAcR,EAChBJ,EACAA,EAAMa,QAAO,SAAA/B,GAAI,OAAGA,EAAKG,aAG7B,OACE,6BACE,qCACA,6BACE,4BAAQE,QAAS,kBAAMkB,GAAYD,KAAnC,QACQA,EAAU,YAAY,QAGhC,4BACGQ,EAAYE,KAAI,SAAChC,EAAKiC,GAAN,OACf,kBAAC,EAAD,CAAMC,IAAKD,EACVjC,KAAMA,EACNC,iBAAkB,kBAtDA,SAACY,GAC1B,IAAMb,EAAOkB,EAAMiB,MAAK,SAAAC,GAAC,OAAGA,EAAEvB,KAAOA,KAC/BwB,EAAW,eAAOrC,EAAP,CAAaG,WAAWH,EAAKG,YAE9CsB,EACUZ,EAAIwB,GACX7B,MAAK,SAAA8B,GACJnB,EAASD,EAAMc,KAAI,SAAAhC,GAAI,OAAIA,EAAKa,KAAOA,EAAKb,EAAOsC,SAEpDC,OAAM,SAAAC,GACLC,MAAM,aAAD,OACUzC,EAAKI,QADf,sCAGLe,EAASD,EAAMa,QAAO,SAAAK,GAAC,OAAIA,EAAEvB,KAAOA,SAyCT6B,CAAmB1C,EAAKa,WAIrD,0BAAM8B,SAvCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB1C,QAASgB,EACT2B,MAAM,IAAIC,MAAOC,cACjB9C,UAAW+C,KAAKC,SAAS,IAE3B1B,EACUqB,GACPtC,MAAK,SAAA8B,GACJnB,EAASD,EAAMkC,OAAOd,IACtBjB,EAAW,SA6BX,2BAAOgC,MAAOjC,EAASkC,SA1BJ,SAACV,GACxBjB,QAAQC,IAAIgB,EAAMW,OAAOF,OACzBhC,EAAWuB,EAAMW,OAAOF,UAyBpB,4BAAQG,KAAK,UAAb,WCzERC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.13d4dab5.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({note, toggleImportance}) => {\n  const label = note.important\n    ? 'make unimportant' : 'make important'\n  return (\n    <li>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note\n","import axios from 'axios';\nconst baseUrl = '/api/notes';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n};\n\nexport default {\n  getAll,\n  create,\n  update\n};","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n  useEffect(()=> {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n=> n.id === id)\n    const changedNote = {...note, important:!note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        alert(\n          `the note '${note.content}' was already deleted from server`\n        )\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  console.log('render', notes.length, 'notes')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random()>0.5\n    }\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n  const handleNoteChange = (event) =>{\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note=> note.important)\n\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important':'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note,i) =>\n          <Note key={i}\n           note={note}\n           toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange}/>\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}